#+title: holy-books
#+subtitle: An Emacs interface to the Quran and the Bible: Org-mode links, tooltips, and Lisp look-ups
#+author: [[https://alhassy.github.io/][Musa Al-hassy]]
#+PROPERTY: header-args:emacs-lisp :tangle holy-books.el :exports code
#+options: d:nil toc:nil
#+EXPORT_FILE_NAME: index
#+PROPERTY: header-args :eval never-export

# MA: To reuse this setup for other projects: M-% holy-books ⟪new-pacakge-name⟫

# (progn (org-babel-tangle-file "holy-books.org") (load-file "holy-books.el") (holy-books-mode) )

# (load-file "~/blog/AlBasmala.el")
blog:header

* Lisp Package Preamble                                            :noexport:
  :PROPERTIES:
  :CUSTOM_ID: Preamble
  :END:
#+BEGIN_SRC emacs-lisp  :noweb yes
;;; holy-books.el --- Org-mode links/tooltips/lookups for Quran & Bible  -*- lexical-binding: t; -*-

;; Copyright (c) 2021 Musa Al-hassy

;; Author: Musa Al-hassy <alhassy@gmail.com>
;; Version: 1
;; Package-Requires: ((s "1.12.0") (dash "2.16.0") (emacs "26.1") (org "9.1"))
;; Keywords: quran, bible, links, tooltips, convenience, comm, hypermedia
;; Repo: https://github.com/alhassy/holy-books
;; Webpage: https://alhassy.github.io/holy-books/

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; This library provides common desirable features using the Org interface for
;; when writing about the Quran and the Bible:
;;
;; 0. Links “quran:chapter:verse|colour|size|no-info-p”, or just “quran:chapter:verse”
;;    for retrieving a verse from the Quran. Use “Quran:chapter:verse” to HTML export
;;    as a tooltip.
;;
;; 1. Likewise, “bible:book:chapter:verse”.
;;
;; 2. Two functions, holy-books-quran and holy-books-bible that do the heavy
;;    work of the link types.
;;
;; 3. A link type to produce the Arabic basmallah; e.g., “basmala:darkgreen|20px|span”.
;;
;; Minimal Working Example:
;;
;; Sometimes I want to remember the words of the God of Abraham. In English Bibles,
;; His name is “Elohim”, whereas in Arabic Bibles and the Quran, His name is
;; “Allah”. We can use links to quickly access them, such as Quran:7:157|darkgreen
;; and bible:Deuteronomy:18:18-22|darkblue.  Arab-speaking Christians and Muslims
;; use the Unicode symbol [[green:ﷲ]] to refer to Him ---e.g., they would write ﷲ ﷳ ,
;; “Allah akbar”, to declare the greatness of God-- and, as the previous passage
;; says “in the name of the Lord”, there is a nice calligraphic form that is used
;; by Arabic speakers when starting a task, namely [[basmala:darkgreen|20px|span]]
;; ---this is known as the ‘basmalallah’, which is Arabic for “name of God”.
;; (Using capitalised ‘Quran:⋯’ and ‘Bible:⋯’ results in tooltips.)
;;
;; This file has been tangled from a literate, org-mode, file.

;;; Code:

;; String and list manipulation libraries
;; https://github.com/magnars/dash.el
;; https://github.com/magnars/s.el

(require 's)               ;; “The long lost Emacs string manipulation library”
(require 'dash)            ;; “A modern list library for Emacs”
(require 'cl-lib)          ;; New Common Lisp library; ‘cl-???’ forms.
(require 'org)

<<forward-decls>>
#+END_SRC

#+BEGIN_SRC emacs-lisp :noweb yes :tangle no
;;;###autoload
(define-minor-mode holy-books-mode
    "Org-mode links, tooltips, and Lisp look-ups for the Quran & Bible."
  nil nil nil)
#+END_SRC

The following more elaborate version is for when the package has stuff
to enable/disable when being toggled.
#+BEGIN_SRC emacs-lisp :noweb yes :tangle no
;;;###autoload
(define-minor-mode holy-books-mode
    "Org-mode links, tooltips, and Lisp look-ups for the Quran & Bible."
  nil nil nil
  (if holy-books-mode
      (progn
        <<enable-mode>>
      ) ;; Must be on a new line; I'm using noweb-refs
    <<disable-mode>>
    )) ;; Must be on a new line; I'm using noweb-refs
#+END_SRC

#+RESULTS:

# With noweb, we need those new lines; otherwise in “x <<y>> z” results in every
# line of <<y>> being prefixed by x and postfixed by z.
# #
# See https://github.com/alhassy/emacs.d#what-does-literate-programming-look-like

* Abstract :ignore:
  :PROPERTIES:
  :CUSTOM_ID: Abstract
  :END:

#+begin_center

badge:Emacs|27|green|https://www.gnu.org/software/emacs|gnu-emacs
badge:Org|9.4|blue|https://orgmode.org|gnu

#+html: <span>
badge:holy-books|1.0|informational|https://github.com/alhassy/holy-books|Gnu-Emacs

# #+html: <a href="https://melpa.org/#/holy-books"><img alt="MELPA" src="https://melpa.org/packages/holy-books-badge.svg"/></a>
# #+html: </span>

[[badge:license|GNU_3|informational|https://www.gnu.org/licenses/gpl-3.0.en.html|read-the-docs][gnu 3 license badge]]
[[badge:docs|literate|success|https://github.com/alhassy/emacs.d#what-does-literate-programming-look-like|read-the-docs][read-the-docs badge]]
tweet:https://github.com/alhassy/holy-books
badge:contributions|welcome|green|https://github.com/alhassy/holy-books/issues

badge:author|musa_al-hassy|purple|https://alhassy.github.io/|nintendo-3ds
badge:|buy_me_a coffee|gray|https://www.buymeacoffee.com/alhassy|buy-me-a-coffee

badge:Hire|me|success|https://alhassy.github.io/about

#+end_center

# TODO: /Screenshots!/

#+begin_center
*Abstract*
#+end_center
#+begin_quote

Let's use Org-mode links to look-up Quranic and Biblical verses!

Links such as ~quran:chapter:verse~ will, upon export, retrieve
the requested verse and inline it in the resulting text.

For now, only the Quran and the Bible are supported.
#+end_quote

#+TOC: headlines 2

/Super short example.../

   #+begin_org-demo :source-color green :result-color white :style sequential :sep ""
  Sometimes I start a task with the Lord's name--- basmala:darkgreen|20px|span
  ---which means quran:1:1|darkgreen.
  My friends like to say bible:Genesis:1:3|darkblue.
   #+end_org-demo
  #+begin_box Tooltips: Using Capitalisation ‘Quran:⋯’ and ‘Bible:⋯’ :background-color custard
   Sometimes I start a task with the Lord's name--- basmala:darkgreen|20px|span
  ---which means Quran:1:1|darkgreen.
  My friends like to say Bible:Genesis:1:3|darkblue.
  #+end_box
* Longer Example
  :PROPERTIES:
  :CUSTOM_ID: Longer-Example
  :END:

   #+begin_org-demo :style sequential :source-color green :result-color white :sep ""
 Sometimes I want to remember the words of the God of Abraham. In English Bibles,
 His name is “Elohim”, whereas in Arabic Bibles and the Quran, His name is
 “Allah”. We can use links to quickly access them, such as quran:7:157|darkgreen
 and bible:Deuteronomy:18:18-22|darkblue.  Arab-speaking Christians and Muslims
 use the Unicode symbol [[green:ﷲ]] to refer to Him ---e.g., they would write ﷲ ﷳ ,
 “Allah akbar”, to declare the greatness of God-- and, as the previous passage
 says “in the name of the Lord”, there is a nice calligraphic form that is used
 by Arabic speakers when starting a task, namely [[basmala:darkgreen|20px|span]]
 ---this is known as the ‘basmalallah’, which is Arabic for “name of God”.
 (Using capitalised ‘Quran:⋯’ and ‘Bible:⋯’ results in tooltips.)
 #+end_org-demo
 #+begin_box Tooltips: Using Capitalisation ‘Quran:⋯’ and ‘Bible:⋯’ :background-color custard
 Sometimes I want to remember the words of the God of Abraham. In English Bibles,
 His name is “Elohim”, whereas in Arabic Bibles and the Quran, His name is
 “Allah”. We can use links to quickly access them, such as Quran:7:157|darkgreen
 and Bible:Deuteronomy:18:18-22|darkblue.  Arab-speaking Christians and Muslims
 use the Unicode symbol [[green:ﷲ]] to refer to Him ---e.g., they would write ﷲ ﷳ ,
 “Allah akbar”, to declare the greatness of God-- and, as the previous passage
 says “in the name of the Lord”, there is a nice calligraphic form that is used
 by Arabic speakers when starting a task, namely [[basmala:darkgreen|20px|span]]
 ---this is known as the ‘basmalallah’, which is Arabic for “name of God”.
 (Using capitalised ‘Quran:⋯’ and ‘Bible:⋯’ results in tooltips.)
 #+end_box

* Yet Another Example
  :PROPERTIES:
  :CUSTOM_ID: Yet-Another-Example
  :END:

quran:12:1
quran:12:2
quran:12:3
quran:12:4
quran:12:5

--------------------------------------------------------------------------------


Quran:12:1
Quran:12:2
Quran:12:3
Quran:12:4
Quran:12:5
* basmala ﷽
  :PROPERTIES:
  :CUSTOM_ID:
  :END:

The [[https://en.wikipedia.org/wiki/Basmala][basmala]] is Arabic for “in the name of God”, and the Unicode symbol ﷽ says
“In the name of Allah, the most gracious, the most merciful”.

One could wrap this up in HTML tags to get the desired style, as in
#+begin_src org :tangle no
,#+html: <center style="color:darkgreen;font-size:60px;padding:25px">
﷽
,#+html: </center>
#+end_src

Much better would be ~basmala:darkgreen|20px|span~, resulting in the inline
basmala:darkgreen|20px|span; whereas just ~basmala:darkgreen~ results in the
centred form: basmala:darkgreen.

 #+begin_src emacs-lisp -n -r :tangle no
(org-link-set-parameters
  "basmala"
  :follow (lambda (label) nil)
  :export (lambda (label description backend)
            (-let [(color size html-tag) (s-split "|" label)]
              (format
               "<%s style=\"color:%s;font-size:%s;padding:25px\">
                     ﷽
                </%s>"
               (or html-tag "center")
               (or color 'darkgreen)
               (or size '60px)
               (or html-tag "center"))))
  :face '(:foreground "green" :weight bold))
 #+end_src

* holy-books-quran
  :PROPERTIES:
  :CUSTOM_ID: holy-books-quran
  :END:

#+begin_src emacs-lisp
(defvar holy-books-quran-cache nil
  "A plist storing the verses looked up by ‘holy-books-quran’ for faster reuse.

Each key in the plist refers to a chapter, and the values are plists:
Keys are verses numbers and values are the actual verses ---but there is
a special key ‘:name’ whose value is the Arabic-English name of the chapter.")

(defun holy-books-quran (chapter verse)
  "Lookup a verse, as a string, from the Quran.

CHAPTER and VERSE are both numbers, referring to a chapter in the Quran
and a verse it contains.
In the associated Org link, both are treated as strings.

+ Lookups are stored in the variable `holy-books-quran-cache' for faster resuse.
+ Quran lookup is based on https://quran.com .
+ Examples:

    ;; Get verse 2 of chapter 7 of the Quran
    (holy-books-quran 7 2)

    ;; Get English-Arabic name of 7th chapter
    (cl-getf (cl-getf holy-books-quran 7) :name)

--------------------------------------------------------------------------------

There is an Org link form: “quran:chapter:verse|color|size|no-info-p”
Only ‘chapter’ and ‘verse’ are mandatory; when ‘no-info-p’ is given,
the chapter and verse numbers are not mentioned in the resulting output.

Examples:
           quran:7:157|darkgreen|30px|t

           quran:7:157

For now, only Org HTML export is supported.

--------------------------------------------------------------------------------

Finally, there is also an HTML tooltip version with a captial ‘Q’;
it takes the same arguments but only the chapter and verse are actually used.
E.g. Quran:7:157 results in text “Quran 7:157” with a tooltip showing the verse."
  (let (start result)
    ;; get info about the current chapter
    (unless (cl-getf (cl-getf holy-books-quran-cache chapter) :name)
      (switch-to-buffer
       (url-retrieve-synchronously
        (format "https://quran.com/%s/%s?translations=131" chapter verse)))
      (re-search-forward (format "\"%s " chapter))
      (setq start (point))
      (end-of-line)
      (setq result (buffer-substring-no-properties start (point)))
      (kill-buffer)
      (thread-last (decode-coding-string result 'utf-8)
        (s-chop-suffix "\">")
        (s-split " ")
        (-drop-last 1)
        (mapcar #'s-capitalize)
        (s-join " ")
        (setf (cl-getf (cl-getf holy-books-quran-cache chapter) :name))))

  ;; get the actual verse requested
  (--if-let (cl-getf (cl-getf holy-books-quran-cache chapter) verse)
      it
    (switch-to-buffer
     (url-retrieve-synchronously
      (format "https://quran.com/%s/%s?translations=131" chapter verse)))
    (re-search-forward "Dr. Mustafa Khattab, the Clear Quran")
    (forward-line -2)
    (beginning-of-line)
    (setq start (point))
    (end-of-line)
    (setq result (buffer-substring-no-properties start (point)))
    (kill-buffer)
    (thread-last (decode-coding-string result 'utf-8)
      (s-replace-regexp "<sup.*sup>" "")
      (setf (cl-getf (cl-getf holy-books-quran-cache chapter) verse))))))

;; quran:chapter:verse|color|size|no-info-p
(org-link-set-parameters
  "quran"
  :follow (lambda (_) nil)
  :export (lambda (label _ __)
            (-let* (((chapter:verse color size no-info-p) (s-split "|" label))
                    ((chapter verse) (s-split ":" chapter:verse)))
              (format "<span style=\"color:%s;font-size:%s;\">
                             ﴾<em> %s</em>﴿ %s
                       </span>"
                      color size
                      (holy-books-quran chapter verse)
                      (if no-info-p
                          ""
                        (format
                         (concat
                          "<small>"
                            "<a href="
                               "\"https://quran.com/chapter_info/%s?local=en\">"
                              "Quran %s:%s, %s"
                             "</a>"
                          "</small>")
                         chapter
                         chapter
                         verse
                         (cl-getf (cl-getf holy-books-quran-cache chapter)
                                  :name))))))
  :face '(:foreground "green" :weight bold))


;; Quran:chapter:verse|color|size|no-info-p
(org-link-set-parameters
  "Quran"
  :follow (lambda (_) nil)
  :export (lambda (label _ __)
            (-let* (((chapter:verse _ __ ___) (s-split "|" label))
                    ((chapter verse) (s-split ":" chapter:verse)))
              (format "<abbr class=\"tooltip\"
                             title=\"﴾<em> %s</em>﴿ <br><br> %s <br><br> %s\">
                          Quran %s:%s
                       </abbr>&emsp13;"
                      (holy-books-quran chapter verse)
                      (cl-getf (cl-getf holy-books-quran-cache chapter) :name)
                      (format "https://quran.com/%s" chapter)
                      chapter verse)))
  :face '(:foreground "green" :weight bold))
#+end_src

* holy-books-bible
  :PROPERTIES:
  :CUSTOM_ID: holy-books-bible
  :END:

  #+begin_src emacs-lisp
(defun holy-books-bible (book chapter verses)
  "Retrive a verse from the Christian Bible.

CHAPTER is a number.
VERSES is either a number or a string “x-y” of numbers.
BOOK is any of the books of the Bible, with ‘+’ instead of spaces!

Examples:

        (holy-books-bible \"Deuteronomy\" 18 \"18-22\")  ;; Lisp

        bible:Deuteronomy:18:18-22|darkblue   ;; Org-mode

        Bible:Deuteronomy:18:18-22            ;; Tooltip

There is also an Org HTML export link, “bible:book:chapter:verse”
sharing the same optional arguments and variations as the “quran:” link;
see the documentation of the method HOLY-BOOKS-QURAN for details.

Currently, Bible lookups are not cached and Quran lookups do not support the
“x-y” verse lookup style.

Possible books include:

 ;; Old Testament
 Genesis Exodus Leviticus Numbers Joshua Judges Ruth
 1+Samuel 2+Samuel 1+Kings 2+Kings 1+Chronicles 2+Chronicles Ezra
 Nehemiah Esther Job Psalms Proverbs Ecclesiastes Song+of+Solomon
 Isaiah Jeremiah Lamentations Ezekiel Daniel Hosea Joel Amos
 Obadiah Jonah Micah Nahum Habakkuk Zephaniah Haggai Zechariah
 Malachi
 ;; New Testament
 Matthew Mark Luke John Acts Romans 1+Corinthians 2+Corinthians
 Galatians Ephesians Philippians Colossians 1+Thessalonians
 2+Thessalonians 1+Timothy 2+Timothy Titus Philemon Hebrews James
 1+Peter 2+Peter 1+John 2+John 3+John Jude Revelation

For example, the following incantation yields the first verse of
the first chapter of each book.

   (s-join \"\n\n<hr>\" (--map (holy-books-bible it 1 1) '(...above list...)))"
  (let (start result)
    (switch-to-buffer
     (url-retrieve-synchronously
      (format "https://www.christianity.com/bible/bible.php?q=%s+%s%%3A%s"
              book chapter verses)))
    (re-search-forward (format "<blockquote>"))
    (setq start (point))
    (re-search-forward (format "</blockquote>"))
    (backward-word)
    (setq result (buffer-substring-no-properties start (point)))
    (kill-buffer)
    (thread-last (decode-coding-string result 'utf-8)
      (s-replace-regexp
       "<span class=\"verse-num\"><strong><a href=\".*?\">.*?</strong> </a>"
       "")
      (s-replace-regexp "<h4>.*?big-chapter-num.*?&nbsp;" "")
      (s-replace-regexp "<a href=\".*?\">.*?</a>" "")
      (s-replace-all '(("</p>" . "") ("<p>" . "") ("</span>" . "")))
      (s-chop-suffix "</")
      (s-chop-suffix "\">"))))

;; bible:book:chapter:verses|color|size|no-info-p
;; Ex. bible:Deuteronomy:18:18-22|darkblue|40px
(org-link-set-parameters
  "bible"
  :follow (lambda (_) nil)
  :export (lambda (label _ __)
            (-let* (((book:chapter:verse color size no-info-p)
                     (s-split "|" label))
                    ((book chapter verse) (s-split ":" book:chapter:verse)))
              (format "<span style=\"color:%s;font-size:%s;\">
                             ﴾<em> %s</em>﴿ %s
                       </span>"
                      color size
                      (holy-books-bible book chapter verse)
                      (if no-info-p
                          ""
                        (format
                         (concat "<small>"
                                   "<a href=\"https://www.christianity.com"
                                        "/bible/bible.php?q=%s+%s&ver=niv\">"
                                     "%s %s:%s"
                                   "</a>"
                                 "</small>")
                         book chapter book chapter verse)))))
  :face '(:foreground "green" :weight bold))

;; Bible:book:chapter:verses|color|size|no-info-p
;; Ex. Bible:Deuteronomy:18:18-22|darkblue|40px
(org-link-set-parameters
  "Bible"
  :follow (lambda (_) nil)
  :export (lambda (label _ __)
            (-let* (((book:chapter:verse _ __ ___) (s-split "|" label))
                    ((book chapter verse) (s-split ":" book:chapter:verse)))
              (format "<abbr class=\"tooltip\"
                             title=\"﴾<em> %s</em>﴿ <br><br> %s\">
                         %s %s:%s
                       </abbr>&emsp13;"
                      (s-replace "\"" "″" (holy-books-bible book chapter verse))
                      (format (concat "https://www.christianity.com/"
                                      "bible/bible.php?q=%s+%s")
                              book chapter)
                      book chapter verse)))
  :face '(:foreground "green" :weight bold))
#+end_src

** Example: The first verse of the first chapter of each book
   :PROPERTIES:
   :CUSTOM_ID: Example-The-first-verse-of-the-first-chapter-of-each-book
   :END:
 #+begin_src emacs-lisp :wrap export html :tangle no
; (holy-books-bible "Genesis" 1 "2-5")
; (holy-books-bible "Exodus" 1 "2-5") ;; Joseph!

(setq books '(
 ;; Old Testament
 Genesis Exodus Leviticus Numbers Joshua Judges Ruth
 1+Samuel 2+Samuel 1+Kings 2+Kings 1+Chronicles 2+Chronicles Ezra
 Nehemiah Esther Job Psalms Proverbs Ecclesiastes Song+of+Solomon
 Isaiah Jeremiah Lamentations Ezekiel Daniel Hosea Joel Amos
 Obadiah Jonah Micah Nahum Habakkuk Zephaniah Haggai Zechariah
 Malachi
 ;; New Testament
 Matthew Mark Luke John Acts Romans 1+Corinthians 2+Corinthians
 Galatians Ephesians Philippians Colossians 1+Thessalonians
 2+Thessalonians 1+Timothy 2+Timothy Titus Philemon Hebrews James
 1+Peter 2+Peter 1+John 2+John 3+John Jude Revelation))

(s-join "\n\n<hr>" (--map (holy-books-bible it 1 1) books))
 #+end_src
* Summary
  :PROPERTIES:
  :CUSTOM_ID: Summary
  :END:

#+begin_quote
The full article may be read as
badge:|HTML|informational|https://alhassy.github.io/holy-books/|ghost ---or visit the
repo github-stars:alhassy/holy-books .
#+end_quote

link-here:summary

| Link                     | Action                         |
|--------------------------+--------------------------------|
| ~quran:chapter:verse~      | Retrive a verse from the Quran |
| ~bible:book:chapter:verse~ | Retrive a verse from the Bible |
| ~[[basmala:]]~             | Produce the Basmala ligature   |

These each take optional arguments separated by ‘|’; see doc:holy-books-quran
and doc:holy-books-bible or see the full documentation online at
badge:|HTML|informational|https://alhassy.github.io/holy-books/|ghost.

** Installation Instructions
   :PROPERTIES:
   :CUSTOM_ID: Installation-Instructions
   :END:

Manually or using [[https://github.com/alhassy/emacs.d#installing-emacs-packages-directly-from-source][quelpa]]:
#+BEGIN_SRC emacs-lisp :tangle no
;; ⟨0⟩ Download the holy-books.el file manually or using quelpa
(quelpa '(holy-books :fetcher github :repo
"alhassy/holy-books"))

;; ⟨1⟩ Have this always active in Org buffers
(add-hook #'org-mode-hook #'holy-books-mode)

;; ⟨1′⟩ Or use: “M-x holy-books-mode” to turn it on/off
#+END_SRC

** COMMENT *Or* with [[https://github.com/alhassy/emacs.d#use-package-the-start-of-initel][use-package]]:
   :PROPERTIES:
   :CUSTOM_ID: COMMENT-Or-with-https-github-com-alhassy-emacs-d-use-package-the-start-of-initel-use-package
   :END:
 #+BEGIN_SRC emacs-lisp :tangle no
(use-package holy-books
  :ensure t
  :hook (org-mode . holy-books-mode)
  :custom
    ;; The places where I keep my ‘#+documentation’
    (holy-books--docs-libraries
     '("~/holy-books/documentation.org"))
    ;; Disable the in-Emacs fancy-links feature?
    ;; (holy-books-fancy-links nil)
    ;; Details heading “flash pink” whenever the user hovers over them?
    (org-html-head-extra (concat org-html-head-extra "<style>  summary:hover {background:pink;} </style>"))
    ;; The message prefixing a ‘tweet:url’ badge
    (holy-books-link-twitter-excitement
     "This looks super neat (•̀ᴗ•́)و:")
  :config
  ;; Use short names like ‘defblock’ instead of the fully qualified name
  ;; ‘holy-books--defblock’
    (holy-books-short-names))
 #+END_SRC

** Bye!
   :PROPERTIES:
   :CUSTOM_ID: Bye
   :END:

badge:thanks|for_reading
tweet:https://github.com/alhassy/holy-books
badge:|buy_me_a coffee|gray|https://www.buymeacoffee.com/alhassy|buy-me-a-coffee

* Lisp Postamble  :noexport:
  :PROPERTIES:
  :CUSTOM_ID: Postamble
  :END:
#+BEGIN_SRC emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(provide 'holy-books)

;;; holy-books.el ends here
#+END_SRC
* MELPA Checks
  :PROPERTIES:
  :CUSTOM_ID: COMMENT-MELPA-Checks
  :END:
https://github.com/riscy/melpazoid

1. In Github repo: Add file ⇒ Create new file ⇒ License.txt ⇒ Select template ⇒ GNU 3
2. Ensure first line ends with: -*- lexical-binding: t; -*-
3. Include appropriate standard keywords;
   #+begin_src emacs-lisp :tangle no
(pp finder-known-keywords)
   #+end_src

   #+RESULTS:
   #+begin_example
   ((abbrev . "abbreviation handling, typing shortcuts, and macros")
    (bib . "bibliography processors")
    (c . "C and related programming languages")
    (calendar . "calendar and time management tools")
    (comm . "communications, networking, and remote file access")
    (convenience . "convenience features for faster editing")
    (data . "editing data (non-text) files")
    (docs . "Emacs documentation facilities")
    (emulations . "emulations of other editors")
    (extensions . "Emacs Lisp language extensions")
    (faces . "fonts and colors for text")
    (files . "file editing and manipulation")
    (frames . "Emacs frames and window systems")
    (games . "games, jokes and amusements")
    (hardware . "interfacing with system hardware")
    (help . "Emacs help systems")
    (hypermedia . "links between text or other media types")
    (i18n . "internationalization and character-set support")
    (internal . "code for Emacs internals, build process, defaults")
    (languages . "specialized modes for editing programming languages")
    (lisp . "Lisp support, including Emacs Lisp")
    (local . "code local to your site")
    (maint . "Emacs development tools and aids")
    (mail . "email reading and posting")
    (matching . "searching, matching, and sorting")
    (mouse . "mouse support")
    (multimedia . "images and sound")
    (news . "USENET news reading and posting")
    (outlines . "hierarchical outlining and note taking")
    (processes . "processes, subshells, and compilation")
    (terminals . "text terminals (ttys)")
    (tex . "the TeX document formatter")
    (tools . "programming tools")
    (unix . "UNIX feature interfaces and emulators")
    (vc . "version control")
    (wp . "word processing"))
   #+end_example
4. Use #' instead of ' for function symbols
5. Use ‘-’ as a separator, not ‘/’.
6. Consider reading:
   https://github.com/bbatsov/emacs-lisp-style-guide#the-emacs-lisp-style-guide
7. Use cl-loop, cl-first, cl-second, cl-third instead of loop, first, second, third
8. byte-compile and address any concerns
9. =M-x checkdoc= on the lisp file to ensure it passes expected style issues.
   - Symbols =nil, t= should not appear in single quotes.
   - (progn (setq fill-column 80) (display-fill-column-indicator-mode))
10. Ensure it byte-compiles without any problems.
11. Ensure that package-linter raises no issues; i.e., the following has no result.
     #+BEGIN_SRC emacs-lisp :tangle no
 (use-package package-lint)
 (-let [it "holy-books.el"]
  (ignore-errors (kill-buffer it))
  (find-file-other-window it)
  (package-lint-buffer it)
  (switch-to-buffer "*Package-Lint*")) ;; Should say: “No issues found.”
 #+END_SRC
12. Commit and push everything in your project's repo!
13. Create a recipe file by invoking: M-x package-build-create-recipe
    ---first: (use-package package-build)
    - Place it in: melpa/recipes/
    - The name of the file should be the name of the package, no extension.

    *Or:* Uncomment this section & just tangle the following.
           #+BEGIN_SRC emacs-lisp :tangle ~/melpa/recipes/holy-books
    (holy-books :fetcher github :repo "alhassy/holy-books")
        #+END_SRC
14. Ensure the recipe builds successfully:
    #+BEGIN_SRC shell :tangle no
    cd ~/melpa; rm ~/melpa/packages/holy-books-*; make recipes/holy-books
    #+END_SRC

    If you have trouble, make a file "~/bin/emacs" with
    the following which ensures “emacs” can be run
    from the command line within macos.
    #+begin_src shell :tangle "~/bin/emacs"
#!/bin/sh
/Applications/Emacs.app/Contents/MacOS/Emacs "$@"
#+end_src

15. Ensure the package installs properly from within Emacs:

      #+BEGIN_SRC emacs-lisp :tangle no
(package-install-file "~/melpa/packages/holy-books-")
#+END_SRC
      #+RESULTS:
      : #s(package-desc holy-books (20200417 238) "Twenty-four new custom blocks for Org-mode" ((s (1 12 0)) (dash (2 16 0)) (emacs (24 4))) single nil nil ((:authors ("Musa Al-hassy" . "alhassy@gmail.com")) (:maintainer "Musa Al-hassy" . "alhassy@gmail.com") (:url . "https://alhassy.github.io/holy-books")) nil)
16. Produce a dedicated pull request branch

    #+begin_src emacs-lisp :tangle no
    (magit-status "~/melpa")
    #+end_src

    + ~F p~ to update the repo.
    + Now =b c= to checkout a new branch: Select ~master~ then name the branch by
      the name of the package, e.g., ~holy-books~.
    + Commit your recipe.
    + Push this branch on your melpa fork: ~P p~.
    + Go to the https://github.com/melpa/melpa repo and
      there'll be a big green PR button ^_^
* COMMENT Making ~README.org~
  :PROPERTIES:
  :CUSTOM_ID: COMMENT-Making-README-org
  :END:

  Evaluate the following source block with ~C-c C-c~ to produce a ~README~ file.

#+NAME: make-readme
#+BEGIN_SRC emacs-lisp
(with-temp-buffer
    (insert "
,#+EXPORT_FILE_NAME: README.md
,#+HTML: <h1> An Emacs interface to the Quran and the Bible: Org-mode links, tooltips, and Lisp look-ups </h1>
# +HTML: <h2>  ¯\\_(ツ)_/¯  </h2>
,#+OPTIONS: toc:nil d:nil broken-links:t
,#+html: <div align=\"center\">
#   +INCLUDE: ~/holy-books/holy-books.org::#Abstract :only-contents t
,#+html: </div>

,#+html: <div align=\"center\">
Let's use Org-mode links to look-up Quranic and Biblical verses!

“Live” examples & documentation: https://alhassy.github.io/holy-books/

badge:holy-books|1.0|informational|https://github.com/alhassy/holy-books|Gnu-Emacs

# #+html: <a href=\"https://melpa.org/#/holy-books\"><img alt=\"MELPA\" src=\"https://melpa.org/packages/holy-books-badge.svg\"/></a>
# #+html: </span>

tweet:https://github.com/alhassy/holy-books
badge:contributions|welcome|green|https://github.com/alhassy/holy-books/issues

badge:author|musa_al-hassy|purple|https://alhassy.github.io/|nintendo-3ds
badge:|buy_me_a coffee|gray|https://www.buymeacoffee.com/alhassy|buy-me-a-coffee

badge:Hire|me|success|https://alhassy.github.io/about

,#+html: </div>

,#+TOC: headlines 2

,* Short Example
,#+attr_html: :width 600px
file:images/short_example.png

,* Long Example
,#+attr_html: :width 600px
file:images/long_example.png

,* Summary
,#+INCLUDE: ~/holy-books/holy-books.org::#Summary :only-contents t
#  ,* Minimal working example
#  #+INCLUDE: ~/holy-books/holy-books.org::#Minimal-working-example :only-contents t
")
    (let ((org-export-use-babel nil) (org-export-with-broken-links t))
      (org-mode)
      (org-md-export-to-markdown)))
#+END_SRC

#+RESULTS: make-readme
: README.md

*Then* use =grip= to see that this looks reasonable.
